{"version":3,"sources":["webpack:///./src/pages/ckb.js","webpack:///./src/utils/typography.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/bio.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["ec","EC","BlogIndex","state","privateKey","address","onGenAddress","_this","genAddress","bootstrap","_callee","nodeUrl","core","systemCellInfo","SYSTEM_ENCRYPTION_CODE_HASH","myAddressObj","blake160edPublicKey","script","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","process","NODE_URL","Core","loadSystemCell","sent","rpc","paramsFormatter","toHash","codeHash","generateAddress","utils","blake160","publicKey","args","console","log","setState","stop","componentDidMount","genKeyPair","Address","prefix","this","getPrivateKey","value","render","siteTitle","props","data","site","siteMetadata","title","_this$state","react__WEBPACK_IMPORTED_MODULE_4___default","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_5__","location","_components_seo__WEBPACK_IMPORTED_MODULE_6__","style","marginBottom","rhythm","padding","borderRadius","border","onClick","React","Component","pageQuery","__webpack_require__","d","__webpack_exports__","scale","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1__","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1___default","Wordpress2016","overrideThemeStyles","a.gatsby-resp-image-link","boxShadow","googleFonts","typography","Typography","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","query","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","bioQuery","Bio","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","author","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","fixed","qr","childImageSharp","alt","marginTop","minWidth","_public_static_d_1575665609_json__WEBPACK_IMPORTED_MODULE_1__","ProdPageRenderer","_ref","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Layout","header","_this$props","textDecoration","color","to","fontFamily","marginLeft","marginRight","maxWidth","className","Date","getFullYear","href","_bio__WEBPACK_IMPORTED_MODULE_5__","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","arrayOf"],"mappings":"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","file":"component---src-pages-ckb-js-62db7c6b233f4c5bc4ec.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nimport Core from '@nervosnetwork/ckb-sdk-core'\nimport Address from '@nervosnetwork/ckb-sdk-address'\nimport { ec as EC } from 'elliptic'\n\nconst ec = new EC('secp256k1')\n\n// const privateKey = ec.genKeyPair()\n\n// const address = new Address(privateKey, { prefix: 'ckt' }) // the ckt is the signal for testnet\n\nclass BlogIndex extends React.Component {\n  state = {\n    privateKey: null,\n    address: null,\n  }\n  componentDidMount() {\n    // this.bootstrap()\n  }\n\n  genAddress() {\n    const privateKey = ec.genKeyPair()\n    const address = new Address(privateKey, { prefix: 'ckt' }) // the ckt is the signal for testnet\n\n    // console.log('privateKey: ', '0x'+address.getPrivateKey());\n    // console.log('address: ', address.value);\n\n    this.setState({ privateKey: '0x'+address.getPrivateKey(), address: address.value })\n  }\n\n  onGenAddress = () => {\n    this.genAddress()\n  }\n\n  bootstrap = async() => {\n    const { privateKey } = this.state\n    /**\n     * Generate script code for mining\n     * block_assembler needs `code_hash` and `args` field\n     */\n\n    // https://github.com/nervosnetwork/ckb-sdk-js/blob/develop/packages/ckb-sdk-core/examples/sendTransaction.js#L10-L16\n\n    const nodeUrl = process.env.NODE_URL || 'http://localhost:8114' // example node url\n\n    const core = new Core(nodeUrl) // instantiate the JS SDK with provided node url\n    const systemCellInfo = await core.loadSystemCell() // load system cell, which contains the secp256k1 algorithm used to verify the signature in transaction's witnesses.\n\n    /**\n     * The system encryption code hash is the hash of system cell's data by blake2b algorithm\n     */\n    const SYSTEM_ENCRYPTION_CODE_HASH = core.rpc.paramsFormatter.toHash(systemCellInfo.codeHash)\n\n    /**\n     * genereat address object, who has peroperties like private key, public key, sign method and verify mehtod\n     * - value, the address string\n     * - privateKey, the private key in hex string format\n     * - publicKey, the public key in hex string format\n     * - sign(msg): signature string\n     * - verify(msg, signature): boolean\n     */\n    const myAddressObj = core.generateAddress(privateKey)\n    /**\n     * to see the address\n     */\n    // console.log(myAddressObj.value)\n\n    /**\n     * calculate the lockhash by the address\n     * 1. a blake160-ed public key is required in the args field of lock script\n     * 2. compose the lock script with SYSTEM_ENCRYPTION_CODE_HASH, and args\n     * 3. calculate the hash of lock script\n     */\n    const blake160edPublicKey = core.utils.blake160(myAddressObj.publicKey, 'hex')\n    /**\n     * to see the blake160-ed public key\n     */\n    // console.log(blake160edPublicKey)\n\n    const script = {\n      codeHash: SYSTEM_ENCRYPTION_CODE_HASH,\n      args: [\"0x\" + blake160edPublicKey],\n    }\n\n    console.log('\\nscript: ', script)\n    this.setState({ script })\n  }\n\n  render() {\n    if (!this.state) return null\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    // const posts = data.allMarkdownRemark.edges\n    // const { script } = this.state\n    const { privateKey, address } = this.state\n    // console.log('======\\n this.state: ', this.state)\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"CKB\" />\n        <h3\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        >\n          Your CKB private key and address\n        </h3>\n        <p\n          style={{\n            padding: 10,\n            borderRadius: 3,\n            border: '2px solid #ff5d5d'\n          }}\n        >\n          This ONLY uses for CKB TESTNET, and is NOT a recommended way of creating a wallet. Please ask experienced crypto users to help you generate them. This tool support offline generating and you can turn off your internet connection before click Generate button.(此工具仅用于CKB测试网，仅做测试用途。在线生成地址有风险，请咨询有经验的人帮你生成。本工具支持离线生成，你可以先断网再点击Generate按钮。)\n        </p>\n        <button onClick={this.onGenAddress}>Generate</button>\n        <div><strong>privateKey</strong>: {privateKey}</div>\n        <div><strong>address</strong>: {address}</div>\n        {/* <h3\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        >\n          For miner\n        </h3>\n        <div><strong>codeHash</strong>: {script && script.codeHash}</div>\n        <div><strong>args</strong>: {script && script.args}</div> */}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n","import Typography from \"typography\"\nimport Wordpress2016 from \"typography-theme-wordpress-2016\"\n\nWordpress2016.overrideThemeStyles = () => {\n  return {\n    \"a.gatsby-resp-image-link\": {\n      boxShadow: `none`,\n    },\n  }\n}\n\ndelete Wordpress2016.googleFonts\n\nconst typography = new Typography(Wordpress2016)\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * Bio component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nimport { rhythm } from \"../utils/typography\"\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author } = data.site.siteMetadata\n        return (\n          <div>\n            {/* <div\n              style={{\n                display: `flex`,\n                marginBottom: rhythm(2.5),\n              }}\n            >\n              <Image\n                fixed={data.avatar.childImageSharp.fixed}\n                alt={author}\n                style={{\n                  marginRight: rhythm(1 / 2),\n                  marginBottom: 0,\n                  minWidth: 50,\n                }}\n              />\n              <p>\n                Hosted by <strong>{author}</strong> which are a decentralized organization.\n              </p>\n            </div> */}\n            <div\n              style={{\n                marginBottom: rhythm(2.5),\n              }}\n            >\n            <Image\n                fixed={data.qr.childImageSharp.fixed}\n                alt={author}\n                style={{\n                  marginTop: rhythm(1 / 2),\n                  marginBottom: 0,\n                  minWidth: 50,\n                }}\n              />\n            </div>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/rebase.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 50, height: 50) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    qr: file(absolutePath: { regex: \"/rebase-qr.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 150, height: 150) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`\n\nexport default Bio\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n// import Image from \"gatsby-image\"\n\nimport { rhythm, scale } from \"../utils/typography\"\nimport Bio from \"./bio\"\n\nimport './layout.css'\n\nclass Layout extends React.Component {\n  render() {\n    const { location, title, children } = this.props\n    const rootPath = `${__PATH_PREFIX__}/`\n    let header\n\n    if (location.pathname === rootPath) {\n      header = (\n        <h1\n          style={{\n            ...scale(1.5),\n            marginBottom: rhythm(1.5),\n            marginTop: 0,\n          }}\n        >\n          <Link\n            style={{\n              boxShadow: `none`,\n              textDecoration: `none`,\n              color: `inherit`,\n            }}\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h1>\n      )\n    } else {\n      header = (\n        <h3\n          style={{\n            fontFamily: `Montserrat, sans-serif`,\n            marginTop: 0,\n          }}\n        >\n          <Link\n            style={{\n              boxShadow: `none`,\n              textDecoration: `none`,\n              color: `inherit`,\n            }}\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h3>\n      )\n    }\n    return (\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(24),\n          padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\n        }}\n      >\n        <header>{header}</header>\n        <main className=\"content\">{children}</main>\n        <footer className=\"footer\">\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://github.com/rebase-network\">Rebase</a>\n          <Bio />\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}